apply plugin: 'com.android.model.native'

def lib_distribution_root = '../distribution'
model {
    repositories {
        libs(PrebuiltLibraries) {
            XnLib {
                headers.srcDir "${lib_distribution_root}/XnLib/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/XnLib/lib/${targetPlatform.getName()}/libXnLib.a")
                }
            }
        }
    }

    android {
        compileSdkVersion project.compileSdkVersion
        buildToolsVersion project.buildToolsVersion

        defaultConfig {
            minSdkVersion.apiLevel project.minSdkVersion
            targetSdkVersion.apiLevel project.targetSdkVersion
            versionCode = 1
            versionName = '1.0'
        }

        ndk {
            moduleName = 'DepthUtils'
            ldLibs.addAll(['android', 'log'])
            cppFlags.addAll([
                    '-O3',
                    '-ftree-vectorize',
                    '-ffast-math',
                    '-funroll-loops',
                    '-fPIC',
                    '-fvisibility=hidden',
                    '-DHAVE_NEON=1',
                    '-DXN_NEON',
                    '-flax-vector-conversions',
                    '-I' + file('../submodule/OpenNI2/Include/'),
                    '-I' + file('../submodule/OpenNI2/ThirdParty/PSCommon/XnLib/Include/'),
                    '-DANDROID=1',
                    '-D__arm__=1',
            ])
        }
        sources {
            main {
                jni {
                    source {
                        srcDir file('../submodule/OpenNI2/Source/DepthUtils/')
                    }
                    exportedHeaders {
                        srcDir file('../submodule/OpenNI2/Source/DepthUtils/')
                    }
                    dependencies {
                        project ':XnLib' linkage 'static'
                    }
                }
            }
        }
    }
}

task(distributeLib, type: Copy) {
    dependsOn assemble
    into '../distribution/DepthUtils/'
    from('src/main/jni/DepthUtils.h') {
        into 'include/'
    }
    from('build/outputs/native/release/lib') {
        into 'lib/'
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':XnLib:distributeLib'
    }
}